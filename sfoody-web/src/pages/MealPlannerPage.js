import React, { useState } from 'react';
import './HomePage.css';
import Sidebar from '../components/HomeSidebar';
import UserMenu from '../components/UserMenu';
import NotificationBell from '../components/NotificationBell';
import MealPlanCard from '../components/MealPlanCard';
import { useNavigate, Link } from 'react-router-dom';

const BASE_URL = process.env.REACT_APP_API;

const MealPlannerPage = () => {
  const token = localStorage.getItem('token');
  const role = localStorage.getItem('role');
  const userId = localStorage.getItem('user_id');
  const navigate = useNavigate();

  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [constraints, setConstraints] = useState({
    days: 7,
    profile: '',
    balance: false,
    no_repeat: false,
    max_cook_time: '',
    exclude_tags: [],
    exclude_ingredients: [],
  });

  const [suggestedPlans, setSuggestedPlans] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);

  // --- HANDLE FORM ---
  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setConstraints(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleArrayInput = (e, key) => {
    const values = e.target.value.split(',').map(s => s.trim()).filter(Boolean);
    setConstraints(prev => ({ ...prev, [key]: values }));
  };

  // --- HANDLE SUGGEST ---
  const handleSuggest = async () => {
    setLoading(true);
    setError('');
    setSuccess(false);
    try {
      const res = await fetch(`${BASE_URL}/meal-plans/suggest`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          user_id: userId,
          days: constraints.days,
          constraints: { ...constraints, save: false }
        })
      });
      const data = await res.json();
      if (res.ok) setSuggestedPlans(data);
      else setError(data.message || 'ƒê√£ x·∫£y ra l·ªói.');
    } catch {
      setError('L·ªói m·∫°ng.');
    } finally {
      setLoading(false);
    }
  };

  // --- CONFIRM AND SAVE PLAN ---
  const handleConfirm = async () => {
    try {
      const res = await fetch(`${BASE_URL}/meal-plans`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(suggestedPlans)
      });
      const data = await res.json();
      if (res.ok) setSuccess(true);
      else setError(data.message || 'L·ªói khi l∆∞u th·ª±c ƒë∆°n.');
    } catch {
      setError('L·ªói m·∫°ng.');
    }
  };

  // --- DELETE A MEAL ---
  const handleDeleteMeal = (dayIndex, mealTime) => {
    const updated = [...suggestedPlans];
    const meals = updated[dayIndex].meals.map(m => m.meal_time === mealTime ? { ...m, recipe_id: null } : m);
    updated[dayIndex].meals = meals;
    setSuggestedPlans(updated);
  };

  // --- EDIT A MEAL ---
  const handleEditMeal = (dayIndex, mealTime, newRecipeId) => {
    const updated = [...suggestedPlans];
    const meals = updated[dayIndex].meals.map(m => m.meal_time === mealTime ? { ...m, recipe_id: newRecipeId } : m);
    updated[dayIndex].meals = meals;
    setSuggestedPlans(updated);
  };

  const handleLogout = () => {
    localStorage.clear();
    navigate('/login');
  };

  return (
    <div className="home-container">
      <header className="header">
        <button className="menu-toggle" onClick={() => setSidebarOpen(!sidebarOpen)}>‚ò∞</button>
        <Link to="/"><h1 className="header-title">S-Foody</h1></Link>
        <div className="auth-actions">
          {token ? (
            <>
              <UserMenu onLogout={handleLogout} />
              <NotificationBell token={token} />
            </>
          ) : <button onClick={() => navigate('/login')}>ƒêƒÉng nh·∫≠p</button>}
        </div>
      </header>

      <div className="home-content">
        <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} token={token} role={role} />

        <main className="main-content">
          {/* ==== FORM L·∫¨P K·∫æ HO·∫†CH ==== */}
          <h2 className="section-title">üìù L·∫≠p th·ª±c ƒë∆°n</h2>
          <div className="meal-setup-card">
            <h3 className="meal-form-title">‚öôÔ∏è T√πy ch·ªçn th·ª±c ƒë∆°n</h3>

            <div className="meal-form-group">
              <label>S·ªë ng√†y</label>
              <input type="number" name="days" value={constraints.days} onChange={handleInputChange} />
            </div>

            <div className="meal-form-group">
              <label>H·ªì s∆° ng∆∞·ªùi d√πng</label>
              <select name="profile" value={constraints.profile} onChange={handleInputChange}>
                <option value="">-- Ch·ªçn h·ªì s∆° --</option>
                <option value="gym">üèãÔ∏è T·∫≠p gym</option>
                <option value="sick">ü§í Ng∆∞·ªùi ·ªëm</option>
                <option value="elder">üë¥ Ng∆∞·ªùi cao tu·ªïi</option>
                <option value="child">üßí Tr·∫ª em</option>
              </select>
            </div>

            <div className="meal-form-group checkbox-list">
              <label><input type="checkbox" name="balance" checked={constraints.balance} onChange={handleInputChange} /> ‚öñÔ∏è C√¢n b·∫±ng</label>
              <label><input type="checkbox" name="no_repeat" checked={constraints.no_repeat} onChange={handleInputChange} /> üîÅ Kh√¥ng tr√πng m√≥n</label>
            </div>

            <div className="meal-form-group">
              <label>‚è±Ô∏è Th·ªùi gian n·∫•u t·ªëi ƒëa</label>
              <select name="max_cook_time" value={constraints.max_cook_time} onChange={handleInputChange}>
                <option value="">-- Kh√¥ng gi·ªõi h·∫°n --</option>
                <option value="D∆∞·ªõi 15 ph√∫t">D∆∞·ªõi 15 ph√∫t</option>
                <option value="15 - 30 ph√∫t">15 - 30 ph√∫t</option>
                <option value="30 - 60 ph√∫t">30 - 60 ph√∫t</option>
              </select>
            </div>

            <div className="meal-form-group">
              <label>‚ùå Lo·∫°i b·ªè nguy√™n li·ªáu</label>
              <input type="text" placeholder="vd: t·ªèi, h√†nh" onChange={(e) => handleArrayInput(e, 'exclude_ingredients')} />
            </div>

            <div className="meal-form-group">
              <label>üè∑Ô∏è Lo·∫°i b·ªè tags</label>
              <input type="text" placeholder="vd: chi√™n, ng·ªçt" onChange={(e) => handleArrayInput(e, 'exclude_tags')} />
            </div>

            <div className="meal-form-actions">
              <button className="suggest-btn" onClick={handleSuggest} disabled={loading}>
                {loading ? '‚è≥ ƒêang g·ª£i √Ω...' : '‚ú® G·ª£i √Ω th·ª±c ƒë∆°n'}
              </button>
            </div>
          </div>

          {/* ==== K·∫æT QU·∫¢ ==== */}
          {error && <div className="error-box">‚ùå {error}</div>}
          {success && <div className="success-box">‚úÖ L∆∞u th·ª±c ƒë∆°n th√†nh c√¥ng!</div>}

          <h2 className="section-title">üìã K·∫øt qu·∫£ g·ª£i √Ω</h2>
          <div className="recipe-grid">
            {suggestedPlans.map((plan, index) => (
              <MealPlanCard
                key={index}
                plan={plan}
                onDeleteMeal={(mealTime) => handleDeleteMeal(index, mealTime)}
                onEditMeal={(mealTime, newRecipeId) => handleEditMeal(index, mealTime, newRecipeId)}
              />
            ))}
          </div>

          {suggestedPlans.length > 0 && (
            <div className="load-more">
              <button onClick={handleConfirm}>‚úÖ X√°c nh·∫≠n v√† l∆∞u</button>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default MealPlannerPage;
