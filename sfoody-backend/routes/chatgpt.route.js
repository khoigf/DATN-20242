const express = require('express');
const mongoose = require('mongoose');
const router = express.Router();
const { OpenAI } = require('openai');

const Tag = require('../models/tagModel');
const Ingredient = require('../models/ingredientModel');
const Recipe = require('../models/recipeModel');
const RecipeTag = require('../models/recipeTagModel');
const RecipeIngredient = require('../models/recipeIngredient');

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// Caching tags and ingredients to avoid frequent DB hits
let tagCache = null;
let ingredientCache = null;
let cacheTime = 0;
const CACHE_TTL = 60 * 60 * 1000; // 1 hour

async function loadCache() {
  const now = Date.now();
  if (!tagCache || !ingredientCache || now - cacheTime > CACHE_TTL) {
    tagCache = await Tag.find({});
    ingredientCache = await Ingredient.find({});
    cacheTime = now;
  }
}

// H√†m t√¨m tag v√† ingredient trong c√¢u h·ªèi
async function extractFilters(prompt) {
  await loadCache();
  const filters = {
    tagIds: [],
    excludeIngredientIds: [],
    includeIngredientIds: []
  };

  const promptLower = prompt.toLowerCase();

  for (const tag of tagCache) {
    if (promptLower.includes(tag.name.toLowerCase())) {
      filters.tagIds.push(tag._id);
    }
  }

  for (const ing of ingredientCache) {
    const name = ing.name.toLowerCase();
    const index = promptLower.indexOf(name);
    if (index !== -1) {
      const context = promptLower.slice(Math.max(0, index - 20), index + name.length + 20);
      if (/kh√¥ng|tr√°nh|d·ªã ·ª©ng|lo·∫°i/i.test(context)) {
        filters.excludeIngredientIds.push(ing._id);
      } else {
        filters.includeIngredientIds.push(ing._id);
      }
    }
  }

  return filters;
}

router.post('/ask', async (req, res) => {
  const { messages, filters: incomingFilters } = req.body;
  if (!messages || messages.length === 0) {
    return res.status(400).json({ message: 'Thi·∫øu messages' });
  }

  try {
    const latestMessage = messages[messages.length - 1].content;
    const filters = incomingFilters || await extractFilters(latestMessage);

    let matchedRecipeIds = null;

    // ‚úÖ Tag filtering (must match all tags)
    if (filters.tagIds.length > 0) {
      const recipeIdSets = await Promise.all(
        filters.tagIds.map(tagId =>
          RecipeTag.find({ tag_id: tagId }).distinct('recipe_id')
        )
      );
      
      // 2. Convert t·∫•t c·∫£ v·ªÅ string ƒë·ªÉ so s√°nh an to√†n
      const recipeIdStrSets = recipeIdSets.map(set =>
        set.map(id => id.toString())
      );

      // 3. L·∫•y giao nhau c·ªßa t·∫•t c·∫£ t·∫≠p
      matchedRecipeIds = recipeIdStrSets.reduce((acc, curr) =>
        acc.filter(id => curr.includes(id))
      );

      // 4. Convert l·∫°i ObjectId ƒë·ªÉ truy v·∫•n
      matchedRecipeIds = matchedRecipeIds.map(id => new mongoose.Types.ObjectId(id));
    }
    console.log('Matched recipe IDs after tag filtering:', matchedRecipeIds);
    console.log('Filters applied:', filters);
    // ‚úÖ Include ingredient filtering
    if (filters.includeIngredientIds.length > 0) {
      const recipeWithIngredients = await RecipeIngredient.find({
        ingredient_id: { $in: filters.includeIngredientIds }
      }).distinct('recipe_id');

      matchedRecipeIds = matchedRecipeIds
        ? matchedRecipeIds.filter(id => recipeWithIngredients.includes(id.toString()))
        : recipeWithIngredients;
    }

    // ‚úÖ Exclude ingredient filtering
    if (filters.excludeIngredientIds.length > 0) {
      const recipeToExclude = await RecipeIngredient.find({
        ingredient_id: { $in: filters.excludeIngredientIds }
      }).distinct('recipe_id');

      matchedRecipeIds = matchedRecipeIds
        ? matchedRecipeIds.filter(id => !recipeToExclude.includes(id.toString()))
        : await Recipe.find({ _id: { $nin: recipeToExclude } }).distinct('_id');
    }

    // üîé Truy v·∫•n recipe cu·ªëi c√πng
    if (matchedRecipeIds && matchedRecipeIds.length === 0) {
      return res.json({
        reply: '‚ùå Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn n√†o ph√π h·ª£p v·ªõi t·∫•t c·∫£ y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i v·ªõi y√™u c·∫ßu kh√°c.'
      });
    }

    let recipes;
    if (matchedRecipeIds && matchedRecipeIds.length > 0) {
      recipes = await Recipe.aggregate([
        { $match: { _id: { $in: matchedRecipeIds } } },
        { $limit: 100 },

        // Join recipe_tags ‚Üí tags
        {
          $lookup: {
            from: 'recipetags',
            localField: '_id',
            foreignField: 'recipe_id',
            as: 'recipe_tags'
          }
        },
        {
          $lookup: {
            from: 'tags',
            localField: 'recipe_tags.tag_id',
            foreignField: '_id',
            as: 'tags'
          }
        },

        // Join recipe_ingredients ‚Üí ingredients
        {
          $lookup: {
            from: 'recipeingredients',
            localField: '_id',
            foreignField: 'recipe_id',
            as: 'recipe_ingredients'
          }
        },
        {
          $lookup: {
            from: 'ingredients',
            localField: 'recipe_ingredients.ingredient_id',
            foreignField: '_id',
            as: 'ingredients'
          }
        }
      ]);
    } else {
      recipes = await Recipe.aggregate([
        { $sample: { size: 100 } },

        {
          $lookup: {
            from: 'recipetags',
            localField: '_id',
            foreignField: 'recipe_id',
            as: 'recipe_tags'
          }
        },
        {
          $lookup: {
            from: 'tags',
            localField: 'recipe_tags.tag_id',
            foreignField: '_id',
            as: 'tags'
          }
        },
        {
          $lookup: {
            from: 'recipeingredients',
            localField: '_id',
            foreignField: 'recipe_id',
            as: 'recipe_ingredients'
          }
        },
        {
          $lookup: {
            from: 'ingredients',
            localField: 'recipe_ingredients.ingredient_id',
            foreignField: '_id',
            as: 'ingredients'
          }
        }
      ]);
    }
    // G·ªôp danh s√°ch m√≥n ƒÉn ƒë·ªÉ g·ª≠i k√®m prompt
    const recipeList = recipes.map(r => {
      const tagNames = (r.tags || []).map(tag => tag.name).join(', ');
      const ingredients = (r.ingredients || []).map(i => i.name).join(', ');
      return `- ${r.title}\n  Tags: ${tagNames}\n  Nguy√™n li·ªáu: ${ingredients}`;
    }).join('\n\n');

    const userRequest = messages[messages.length - 1].content;
    const fullPrompt = `
${userRequest}

D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c m√≥n ƒÉn ph√π h·ª£p v·ªõi y√™u c·∫ßu tr√™n (c√≥ k√®m tag v√† nguy√™n li·ªáu):

${recipeList}

H√£y ph√¢n t√≠ch k·ªπ v√† ch·ªâ g·ª£i √Ω c√°c m√≥n th·∫≠t s·ª± ph√π h·ª£p v·ªõi y√™u c·∫ßu. Kh√¥ng g·ª£i √Ω m√≥n kh√¥ng c√≥ trong danh s√°ch n√†y.
`.trim();

    const baseSystemPrompt = {
      role: 'system',
      content: `
B·∫°n l√† m·ªôt ƒë·∫ßu b·∫øp t∆∞ v·∫•n m√≥n ƒÉn th√¥ng minh v√† th√¢n thi·ªán, c√≥ ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ ·∫©m th·ª±c v√† dinh d∆∞·ª°ng.
H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n, d·ªÖ hi·ªÉu v√† ƒë∆∞a ra c√°c g·ª£i √Ω m√≥n ƒÉn ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh.
Khi g·ª£i √Ω m√≥n ƒÉn, h√£y c√¢n nh·∫Øc c√°c y·∫øu t·ªë nh∆∞ s·ª©c kh·ªèe, s·ªü th√≠ch, nguy√™n li·ªáu c√≥ s·∫µn, th·ªùi gian chu·∫©n b·ªã v√† d·ªãp c·ª• th·ªÉ.
Kh√¥ng tr·∫£ l·ªùi c√°c c√¢u h·ªèi ngo√†i lƒ©nh v·ª±c ·∫©m th·ª±c. N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, h√£y t·ª´ ch·ªëi m·ªôt c√°ch l·ªãch s·ª±.
      `.trim()
    };

    const finalMessages = [baseSystemPrompt, { role: 'user', content: fullPrompt }];
    console.log('Final messages sent to OpenAI:', finalMessages);
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: finalMessages,
      temperature: 0.7,
      max_tokens: 500
    });

    const reply = response?.choices?.[0]?.message?.content;
    if (!reply) {
      throw new Error('OpenAI kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ ph√π h·ª£p');
    }

    return res.json({ reply });

  } catch (err) {
    console.error('L·ªói x·ª≠ l√Ω GPT:', err);
    return res.status(500).json({ reply: '‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω, vui l√≤ng th·ª≠ l·∫°i sau.' });
  }
});

module.exports = router;
